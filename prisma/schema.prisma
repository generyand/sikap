// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./local.db"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  syncedAt  DateTime? @map("synced_at") // Track last sync
  isLocal   Boolean  @default(true) // Track if record exists in cloud
  tasks     Task[]

  @@map("users") // This maps the model to a table named "users"
}

// Add SyncQueue model for tracking pending changes
model SyncQueue {
  id        String   @id @default(uuid())
  table     String   // The table being modified
  recordId  String   // ID of the modified record
  operation String   // CREATE, UPDATE, DELETE
  data      String   // JSON string of the changes
  createdAt DateTime @default(now())
  status    String   @default("pending") // pending, completed, failed

  @@map("sync_queue")
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime?
  priority    String    @default("medium")
  status      String    @default("todo")
  completedAt DateTime?
  userId      String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  syncedAt    DateTime? @map("synced_at")
  isLocal     Boolean   @default(true)
  user        User      @relation(fields: [userId], references: [id])

  @@map("tasks")
}
